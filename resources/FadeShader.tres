[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://art/ui/transparent.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform sampler2D texture2;
uniform vec2 texturesize;
uniform vec2 texture2size;
uniform float fadeamount;

varying vec2 uv;
varying vec2 uv2;


void vertex() {
    float target_ratio = 1280.0/720.0;
    float actual_ratio   = texturesize.x / texturesize.y;
    float actual_ratio_2 = texture2size.x / texture2size.y;
    
    if(actual_ratio >= target_ratio) // wider, grow x
    {
        uv = UV.xy * vec2(target_ratio/actual_ratio, 1.0);
        uv.x += (1.0-(target_ratio/actual_ratio))/2.0;
    }
    else // taller, grow y
    {
        uv = UV.xy * vec2(1.0, actual_ratio/target_ratio);
        uv.y += (1.0-(actual_ratio/target_ratio))/2.0;
    }
    if(actual_ratio_2 >= target_ratio) // wider, grow x
    {
        uv2 = UV.xy * vec2(target_ratio/actual_ratio_2, 1.0);
        uv2.x += (1.0-(target_ratio/actual_ratio_2))/2.0;
    }
    else // taller, grow y
    {
        uv2 = UV.xy * vec2(1.0, actual_ratio_2/target_ratio);
        uv2.y += (1.0-(actual_ratio_2/target_ratio))/2.0;
    }
}

void fragment() {
// Texture:2
    vec4 colorA = texture(TEXTURE , uv);
    vec4 colorB = texture(texture2, uv2);
    colorA.rgb *= colorA.a;
    colorB.rgb *= colorB.a;
    vec4 colorC = mix(colorA, colorB, fadeamount);
    if(colorC.a > 0.0)
        colorC.rgb /= colorC.a;
    
// Output:0
    COLOR = colorC;
}

void light() {
// Output:0

}
"

[resource]
shader = SubResource( 1 )
shader_param/texturesize = Vector2( 170, 210 )
shader_param/texture2size = Vector2( 16, 16 )
shader_param/fadeamount = 0.0
shader_param/texture2 = ExtResource( 1 )
